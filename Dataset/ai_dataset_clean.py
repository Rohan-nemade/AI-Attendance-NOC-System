# -*- coding: utf-8 -*-
"""AI dataset clean.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sEmxpK42MyCkaXXsaFw-N5H9l6qabTGe
"""

# Step 1: Install pandas (Colab usually has it pre-installed)
!pip install pandas --quiet

import pandas as pd
import re
from google.colab import files

# Step 2: Upload the attendance.csv file
uploaded = files.upload()  # You choose the file in the dialog

# Get the uploaded file name
file_name = list(uploaded.keys())[0]

# Step 3: Helper functions
def normalize_status(s):
    """Normalize Attendance_Status into standard values."""
    if pd.isna(s) or str(s).strip() == "":
        return pd.NA
    s2 = str(s).strip().lower().rstrip(",. ")
    if s2 in ("p", "present", "present,"):
        return "Present"
    if s2 in ("a", "absent"):
        return "Absent"
    if "excus" in s2:
        return "Excused"
    if "late" in s2:
        return "Late"
    return s2.title()

def extract_roll_int(s):
    """Extract integer from Student_ID for sorting."""
    if pd.isna(s):
        return float("inf")
    m = re.search(r"(\d+)", str(s))
    return int(m.group(1)) if m else float("inf")

def fill_status_by_student_mode(df, col="Attendance_Status", id_col="Student_ID"):
    """Fill missing Attendance_Status with the most frequent value for that student."""
    def fill_group(g):
        available = g[col].dropna()
        if not available.empty:
            mode_vals = available.mode()
            if not mode_vals.empty:
                g[col] = g[col].fillna(mode_vals.iloc[0])
        return g
    return df.groupby(id_col, group_keys=False).apply(fill_group)

# Step 4: Read and clean the data
df = pd.read_csv(file_name, dtype=str)
df = df.applymap(lambda x: x.strip() if isinstance(x, str) else x)

df["Attendance_Status"] = df["Attendance_Status"].map(normalize_status)
df = fill_status_by_student_mode(df)

# Sort by numeric part of Student_ID
df["__roll_int"] = df["Student_ID"].apply(extract_roll_int)
df = df.sort_values(by="__roll_int").drop(columns="__roll_int")

# Step 5: Split and save
df["__subject_norm"] = df["Subject"].str.lower().str.strip()

subjects = {
    "arabic": "arabic_attendance.csv",
    "math": "math_attendance.csv",
    "geography": "geography_attendance.csv"
}

for subj, filename in subjects.items():
    out_df = df[df["__subject_norm"] == subj].drop(columns="__subject_norm")
    out_df.to_csv(filename, index=False)
    files.download(filename)  # Download each file

print("Processing complete! Files downloaded.")